data <- read.csv(files[1])
head(data)
temp <- complete(data)
temp <- complete(file[1])
temp <- complete(files[1])
temp <- complete("specdata")
temp <- complete("specdata", 1)
temp
num_ob <- temp$nobs
num_ob
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- vector()
for(i in 1:length(files)){
data <- read.csv(files[i] )
# remove NA, the complete function does this
temp <- complete(directory, i)
num_ob <- temp$nobs
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
num_ob <- temp$nobs
num_ob
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- vector()
for(i in 1:length(files)){
data <- read.csv(files[i] )
# remove NA, the complete function does this
temp <- complete(directory, i)
num_ob <- temp$nobs
if (as.numeric(num_ob) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
threshold =0
correlation <- vector()
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
correlation
correlation <- c()
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
correlation
if (num_ob > threshold ) {
correlation <- c(correlation, cor(temp$sulfate, temp$nitrate) )
}
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data.frame(lapply(temp$sulfate, temp$nitrate) )))
}
cleanData<- complete.cases(data)
cleanData<-data[complete.cases(data),]
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data.frame(lapply(cleanData$sulfate, cleanData$nitrate) )))
}
if (num_ob > threshold ) {
correlation <- c(correlation, cor(cleanData$sulfate, cleanData$nitrate) )
}
cr <- corr("specdata", 150)
correlation
files <- list.files("specdata", full.names = TRUE)
files[1]
data <- read.csv(files[1])
cleanData<-data[complete.cases(data),]
cleanData$
temp <- complete("specdata", 1)
temp <- complete("specdata", 1)
num_ob <- temp$nobs
threshold =0
correlation <- c()
if (num_ob > threshold ) {
correlation <- c(correlation, cor(cleanData$sulfate, cleanData$nitrate) )
}
correlation
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- complete(directory, 1:332)
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
cr <- corr("specdata", 150)
head(cr)
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- vector()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data)]
temp <- complete(directory, i)
num_ob <- temp$nobs
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
}
cr <- corr("specdata", 150)
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data)]
temp <- complete(directory, i)
num_ob <- temp$nobs
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
}
cr <- corr("specdata", 150)
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data)]
#temp <- complete(directory, i)
#num_ob <- temp$nobs
if ( nrow(data) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
}
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
source("complete.R")
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
#temp <- complete(directory, i)
#num_ob <- temp$nobs
if (nrow(data) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
}
cr <- corr("specdata", 150)
head(cr)
data <- read.csv(files[150])
files <- list.files("specdata", full.names = TRUE)
data <- read.csv(files[150])
data<-data[complete.cases(data),]
correlation<- c()
if (nrow(data) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
correlation
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
#temp <- complete(directory, i)
#num_ob <- temp$nobs
if (nrow(data) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
temp <- complete(directory, i)
num_ob <- temp$nobs
if (num_ob > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
temp <- complete(directory, i)
if (temp$nobs > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
temp <- complete(directory, i)
if (as.numeric(temp$nobs) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
num_ob
num_ob[1]
num_ob> 0
data <- read.csv(files[150])
files <- list.files("specdata", full.names = TRUE)
data <- read.csv(files[150])
data<-data[complete.cases(data),]
correlation<- c()
temp <- complete("specdata", 150)
num_ob <- temp$nobs
if (num_ob > threshold ) {
correlation <- c(correlation, cor(cleanData$sulfate, cleanData$nitrate) )
}
correlation
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
correlation
source("complete.R")
corr<- function(directory, threshold =0){
# read in all the files in the dir
files <- list.files(directory, full.names = TRUE)
correlation <- c()
for(i in 1:length(files)){
data <- read.csv(files[i])
# remove NA, the complete function does this
data <-data[complete.cases(data),]
temp <- complete(directory, i)
num_ob <- temp$nobs
if (nrow(data) > threshold ) {
correlation <- c(correlation, cor(data$sulfate, data$nitrate) )
}
}
return(correlation)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
makeCacheMatrix <- function(ma = matrix()) {
im <- NULL
setMatrix <- function(y) {
ma <<- y
im <<- NULL
}
getMatrix <- function() ma
setinverse <- function(inv) im <<- inv
getinverse <- function() im
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setinverse = setinverse,
getinverse = getinverse)
}
B <- matrix(c(1,2,3,4),2,2)
b
B
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
##     from current environment
makeCacheMatrix <- function(x = matrix()) {
inv_m <- NULL
set <- function(y){
x<<- y
inv_m<<- NULL
}
get <- function() x
setinverse <- function(inverse) inv_m <<- inverse
getinverse <- function() inv_m
list(set=set,
get=get,
setinverse = setinverse,
getinverse= getinverse)
}
## Put comments here that give an overall description of what your
## functions do
## the main goal of this assignment is to learn about scoping rules
##
## comment describing this function:
## This function creates a special object that stores the inverse matrix
## similiarly to the example from the assignment, this function will:
##      set the value of the matrix
##      get the value of the matrix
##      set the value of the inverse matrix
##      get the value of the inverse matrix
## <<- is used to assign a object in an environment different
##     from current environment
makeCacheMatrix <- function(x = matrix()) {
inv_m <- NULL
set <- function(y){
x<<- y
inv_m<<- NULL
}
get <- function() x
setinverse <- function(inverse) inv_m <<- inverse
getinverse <- function() inv_m
list(set=set,
get=get,
setinverse = setinverse,
getinverse= getinverse)
}
## Write a short comment describing this function:
## This function takes calculates the makeCacheMatrix output to get the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_s <- x$getinverse()
m <- x$get()
inv_s <- solve(m, ...)
x$setinverse(inv_s)
return(inv_s)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
my_matrix$getinverse()
my_matrix$get()
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
pwd
getwd
getwd()
library(datasets)
data(iris)
?iris
head(iris)
lapply(iris$Sepal.Length, mean)
dim(iris)
count(is.na(iris$Sepal.Length))
sum(is.na(iris$Sepal.Length))
summary(iris$Sepal.Length)
head(iris)
vir <- iris %>% select(Species == "virginica")
vir <- iris[which(iris$Species=="virginica")]
vir <- iris[which(iris$Species=="virginica")]
vir <- iris[ which(iris$Species=="virginica")]
vir <- iris[ which(iris$Species=="virginica"), ]
vir
summary(vir)
summary(vir$Sepal.Length)
apply(iris,2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars_dt[,  .(mean_cols = mean(hp)), by = cyl]
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8, mean_cols]))
debug(ls)
ls
ls()
