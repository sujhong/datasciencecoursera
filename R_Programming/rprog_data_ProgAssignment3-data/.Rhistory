state <- toupper(state)
outcome <- tolower(outcome)
# get q list of unique states
unique_state <- unique(df$State)
# check that state and outcome are valid
## if an invalid state is passed to best, then function should throw an error via stop function
## with the exact message "invalid state"
## if an invalid outcome is passed, then throw an error with the message "invalid outcome"
if (!(state %in% unique_state)){
stop("invalid state")
}
if (!(outcome %in% conditions)){
stop ("invalid outcome")
}
# remove uncessary columns
temp<- df[,c("name","State","heartAttack_mortalityRate","heartFailure_mortalityRate","pneumonia_mortalityRate")]
# create a temp table that data for state
temp <- df[df$State == state,]
# subset data more to just desired columns
##return hospital name in that state with lowest 30 day death rate
if (outcome == "heart attack"){
#remove uncessary columns
temp <- temp[,c("name","heartAttack_mortalityRate")]
#change the data type to numeric
temp$heartAttack_mortalityRate <- as.numeric(temp$heartAttack_mortalityRate)
# remove NA
temp <- temp[complete.cases(temp),]
#order by rate then hosptial name
temp <- temp[order(temp$heartAttack_mortalityRate,temp$name),]
#return hospital name
return(temp$name[1])
} else if (outcome == "heart failure"){
temp <- temp[,c("name","heartFailure_mortalityRate")]
temp$heartFailure_mortalityRate <- as.numeric(temp$heartFailure_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$heartFailure_mortalityRate,temp$name),]
return(temp$name[1])
} else if(outcome == "pneumonia"){
temp <- temp[,c("name","pneumonia_mortalityRate")]
temp$pneumonia_mortalityRate <- as.numeric(temp$pneumonia_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$pneumonia_mortalityRate,temp$name),]
return(temp$name[1])
}
}
best("tx","heart attack")
# this function takes in two arguments and returns the hospital with the lowest 30 day mortality for the specified outcome
best <- function(state, outcome){
# read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# rename columns for easier use/read
colnames(df)[11] <- "heartAttack_mortalityRate"
colnames(df)[17] <- "heartFailure_mortalityRate"
colnames(df)[23] <- "pneumonia_mortalityRate"
colnames(df)[2] <- "name"
# change case to lower
state <- toupper(state)
outcome <- tolower(outcome)
# get q list of unique states
unique_state <- unique(df$State)
conditions <- c('heart attack', 'heart failure', 'pneumonia')
# check that state and outcome are valid
## if an invalid state is passed to best, then function should throw an error via stop function
## with the exact message "invalid state"
## if an invalid outcome is passed, then throw an error with the message "invalid outcome"
if (!(state %in% unique_state)){
stop("invalid state")
}
if (!(outcome %in% conditions)){
stop ("invalid outcome")
}
# remove uncessary columns
temp<- df[,c("name","State","heartAttack_mortalityRate","heartFailure_mortalityRate","pneumonia_mortalityRate")]
# create a temp table that data for state
temp <- df[df$State == state,]
# subset data more to just desired columns
##return hospital name in that state with lowest 30 day death rate
if (outcome == "heart attack"){
#remove uncessary columns
temp <- temp[,c("name","heartAttack_mortalityRate")]
#change the data type to numeric
temp$heartAttack_mortalityRate <- as.numeric(temp$heartAttack_mortalityRate)
# remove NA
temp <- temp[complete.cases(temp),]
#order by rate then hosptial name
temp <- temp[order(temp$heartAttack_mortalityRate,temp$name),]
#return hospital name
return(temp$name[1])
} else if (outcome == "heart failure"){
temp <- temp[,c("name","heartFailure_mortalityRate")]
temp$heartFailure_mortalityRate <- as.numeric(temp$heartFailure_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$heartFailure_mortalityRate,temp$name),]
return(temp$name[1])
} else if(outcome == "pneumonia"){
temp <- temp[,c("name","pneumonia_mortalityRate")]
temp$pneumonia_mortalityRate <- as.numeric(temp$pneumonia_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$pneumonia_mortalityRate,temp$name),]
return(temp$name[1])
}
}
best("tx","heart attack")
#rank hospitals by outcome in a state
rankhospital <-function(state, outcome, num = "best"){
# read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# rename columns for easier use/read
colnames(df)[11] <- "heartAttack_mortalityRate"
colnames(df)[17] <- "heartFailure_mortalityRate"
colnames(df)[23] <- "pneumonia_mortalityRate"
colnames(df)[2] <- "name"
# change case to lower
state <- toupper(state)
outcome <- tolower(outcome)
# get q list of unique states
unique_state <- unique(df$State)
conditions <- c('heart attack', 'heart failure', 'pneumonia')
# check that state and outcome are valid
## if an invalid state is passed to best, then function should throw an error via stop function
## with the exact message "invalid state"
## if an invalid outcome is passed, then throw an error with the message "invalid outcome"
if (!(state %in% unique_state)){
stop("invalid state")
}
if (!(outcome %in% conditions)){
stop ("invalid outcome")
}
# remove uncessary columns
temp<- df[,c("name","State","heartAttack_mortalityRate","heartFailure_mortalityRate","pneumonia_mortalityRate")]
# create a temp table that data for state
temp <- df[df$State == state,]
# subset data more to just desired columns
##return hospital name in that state with lowest 30 day death rate
if (outcome == "heart attack"){
#remove uncessary columns
temp <- temp[,c("name","heartAttack_mortalityRate")]
#change the data type to numeric
temp$heartAttack_mortalityRate <- as.numeric(temp$heartAttack_mortalityRate)
# remove NA
temp <- temp[complete.cases(temp),]
#order by rate then hosptial name
temp <- temp[order(temp$heartAttack_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[.N,'name'])
}
return(temp[num, 'name'])
} else if (outcome == "heart failure"){
temp <- temp[,c("name","heartFailure_mortalityRate")]
temp$heartFailure_mortalityRate <- as.numeric(temp$heartFailure_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$heartFailure_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[.N,'name'])
}
return(temp[num, 'name'])
} else if(outcome == "pneumonia"){
temp <- temp[,c("name","pneumonia_mortalityRate")]
temp$pneumonia_mortalityRate <- as.numeric(temp$pneumonia_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$pneumonia_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[.N,'name'])
}
return(temp[num, 'name'])
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
nrows(temp)
nrow(temp)
#rank hospitals by outcome in a state
rankhospital <-function(state, outcome, num = "best"){
# read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# rename columns for easier use/read
colnames(df)[11] <- "heartAttack_mortalityRate"
colnames(df)[17] <- "heartFailure_mortalityRate"
colnames(df)[23] <- "pneumonia_mortalityRate"
colnames(df)[2] <- "name"
# change case to lower
state <- toupper(state)
outcome <- tolower(outcome)
# get q list of unique states
unique_state <- unique(df$State)
conditions <- c('heart attack', 'heart failure', 'pneumonia')
# check that state and outcome are valid
## if an invalid state is passed to best, then function should throw an error via stop function
## with the exact message "invalid state"
## if an invalid outcome is passed, then throw an error with the message "invalid outcome"
if (!(state %in% unique_state)){
stop("invalid state")
}
if (!(outcome %in% conditions)){
stop ("invalid outcome")
}
# remove uncessary columns
temp<- df[,c("name","State","heartAttack_mortalityRate","heartFailure_mortalityRate","pneumonia_mortalityRate")]
# create a temp table that data for state
temp <- df[df$State == state,]
# subset data more to just desired columns
##return hospital name in that state with lowest 30 day death rate
if (outcome == "heart attack"){
#remove uncessary columns
temp <- temp[,c("name","heartAttack_mortalityRate")]
#change the data type to numeric
temp$heartAttack_mortalityRate <- as.numeric(temp$heartAttack_mortalityRate)
# remove NA
temp <- temp[complete.cases(temp),]
#order by rate then hosptial name
temp <- temp[order(temp$heartAttack_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
} else if (outcome == "heart failure"){
temp <- temp[,c("name","heartFailure_mortalityRate")]
temp$heartFailure_mortalityRate <- as.numeric(temp$heartFailure_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$heartFailure_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
} else if(outcome == "pneumonia"){
temp <- temp[,c("name","pneumonia_mortalityRate")]
temp$pneumonia_mortalityRate <- as.numeric(temp$pneumonia_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$pneumonia_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
}
}
#rank hospitals by outcome in a state
rankhospital <-function(state, outcome, num = "best"){
# read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# rename columns for easier use/read
colnames(df)[11] <- "heartAttack_mortalityRate"
colnames(df)[17] <- "heartFailure_mortalityRate"
colnames(df)[23] <- "pneumonia_mortalityRate"
colnames(df)[2] <- "name"
# change case to lower
state <- toupper(state)
outcome <- tolower(outcome)
# get q list of unique states
unique_state <- unique(df$State)
conditions <- c('heart attack', 'heart failure', 'pneumonia')
# check that state and outcome are valid
## if an invalid state is passed to best, then function should throw an error via stop function
## with the exact message "invalid state"
## if an invalid outcome is passed, then throw an error with the message "invalid outcome"
if (!(state %in% unique_state)){
stop("invalid state")
}
if (!(outcome %in% conditions)){
stop ("invalid outcome")
}
# remove uncessary columns
temp<- df[,c("name","State","heartAttack_mortalityRate","heartFailure_mortalityRate","pneumonia_mortalityRate")]
# create a temp table that data for state
temp <- df[df$State == state,]
# subset data more to just desired columns
##return hospital name in that state with lowest 30 day death rate
if (outcome == "heart attack"){
#remove uncessary columns
temp <- temp[,c("name","heartAttack_mortalityRate")]
#change the data type to numeric
temp$heartAttack_mortalityRate <- as.numeric(temp$heartAttack_mortalityRate)
# remove NA
temp <- temp[complete.cases(temp),]
#order by rate then hosptial name
temp <- temp[order(temp$heartAttack_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
} else if (outcome == "heart failure"){
temp <- temp[,c("name","heartFailure_mortalityRate")]
temp$heartFailure_mortalityRate <- as.numeric(temp$heartFailure_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$heartFailure_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
} else if(outcome == "pneumonia"){
temp <- temp[,c("name","pneumonia_mortalityRate")]
temp$pneumonia_mortalityRate <- as.numeric(temp$pneumonia_mortalityRate)
temp <- temp[complete.cases(temp),]
temp <- temp[order(temp$pneumonia_mortalityRate,temp$name),]
#return hospital name
if (num == "best"){
return(temp$name[1])
}
if (num == "worst"){
return(temp[nrow(temp),'name'])
}
return(temp[num, 'name'])
}
}
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankall <- function(outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
# Change outcome column class
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
if (num == "best"){
return(out_dt[order(state, get(outcome), `hospital name`)
, .(hospital = head(`hospital name`, 1))
, by = state])
}
if (num == "worst"){
return(out_dt[order(get(outcome), `hospital name`)
, .(hospital = tail(`hospital name`, 1))
, by = state])
}
return(out_dt[order(state, get(outcome), `hospital name`)
, head(.SD,num)
, by = state, .SDcols = c("hospital name") ])
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
# Change outcome column class
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
if (num == "best"){
return(out_dt[order(state, get(outcome), `hospital name`)
, .(hospital = head(`hospital name`, 1))
, by = state])
}
if (num == "worst"){
return(out_dt[order(get(outcome), `hospital name`)
, .(hospital = tail(`hospital name`, 1))
, by = state])
}
return(out_dt[order(state, get(outcome), `hospital name`)
, head(.SD,num)
, by = state, .SDcols = c("hospital name") ])
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
Press h to open a hovercard with more details.
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
